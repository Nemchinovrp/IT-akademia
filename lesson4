import static java.lang.System.out;
import java.util.Arrays;
import java.util.Random;

public class BasketbollTeam {

    static Random random = new Random();

    public static void main(String[] args) {
        int[] height = new int[20 + random.nextInt(10)];
        for (int i = 0; i < height.length; i++) {
            height[i] = 150 + random.nextInt(30);
        }
        out.println(Arrays.toString(height));

        if (isCommand(height, 170, 5)) {
            out.println("Команду можно сформировать");
        } else {
            out.println("Команду нельзя сформировать");
        }
    }

    public static boolean isCommand(int[] height, int minHeight, int count) {
        boolean flag;
        int counter = 0;
        for (int i = 0; i < height.length; i++) {
            if (height[i] > minHeight) {
                counter++;
            }
        }
        out.println(counter);
        if (counter >= count) {
            flag = true;

        } else {
            flag = false;
        }

        return flag;
    }
}
import static java.lang.System.out;

public class Task01_Procedure {

    static void showHelp() {
        out.println("Программа proga 1.0");
        out.println("Использование:");
        out.println("proga команда");
        out.println("Команды:");
        out.println("  help справка");
        out.println("  run  выполнение");
    }

    public static void main(String[] args) {
        if (args.length == 0) {
            showHelp();
        } else {
            String command = args[0];
            if ("help".equals(command)) {
                showHelp();
            } else if ("run".equals(command)) {
                out.println("Программа работает...");
            }
        }
    }

}

import static java.lang.System.out;
import java.util.Scanner;

public class Task02_Parameters {
    static Scanner in = new Scanner(System.in);

    static void average(double x, double y) {
        double result = (x + y) / 2;
        out.println("Среднее чисел " + x
                + " и " + y + " равно " + result);
    }

    public static void main(String[] args) {
        out.print("Введите два числа: ");
        double a = in.nextDouble();
        double b = in.nextDouble();
        average(a, b);
    }

}
import static java.lang.System.out;

public class Task03_ParamVal {

    static void p(int n) {
        n++;
        out.println(n);
    }

    public static void main(String[] args) {
        int n = 1;
        p(n);
        out.println(n);
    }

}

import static java.lang.System.out;
import java.util.Arrays;

public class Task04_ParamArray {

    static void bubbleSort(int[] a) {
        for (int i = a.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int buf = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = buf;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] a = {3, 5, 2, 4, 1};
        bubbleSort(a);
        out.print(Arrays.toString(a));
    }

}

import static java.lang.System.out;
import java.util.Scanner;

public class Task05_Function {
    static Scanner in = new Scanner(System.in);

    static double average(double x, double y) {
        return (x + y) / 2;
    }

    public static void main(String[] args) {
        out.print("Введите два числа: ");
        double a = in.nextDouble();
        double b = in.nextDouble();
        out.println("Среднее чисел " + a + " и " + b
                + " равно " + average(a, b));
    }

}

import static java.lang.System.out;
import java.util.Scanner;

public class Task06_Return {
    static Scanner in = new Scanner(System.in);

    static int sign(double x) {
        if (x < 0) {
            return -1;
        } else if (x == 0) {
            return 0;
        } else {
            return 1;
        }
    }

    public static void main(String[] args) {
        out.print("Введите число: ");
        double a = in.nextDouble();
        out.println("Знак числа равен " + sign(a));
    }

}
import static java.lang.System.out;
import java.util.Scanner;

public class Task07_SingleExit {
    static Scanner in = new Scanner(System.in);

    static int sign(double x) {
        int result;
        if (x < 0) {
            result = -1;
        } else if (x == 0) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public static void main(String[] args) {
        out.print("Введите число: ");
        double a = in.nextDouble();
        out.println("Знак числа равен " + sign(a));
    }

}

import static java.lang.Math.*;
import static java.lang.System.out;
import java.util.Scanner;

public class Task08_Quadratic {
    static Scanner in = new Scanner(System.in);

    static double[] quadratic(double a, double b, double c) {
        double[] x;
        double d = b * b - 4 * a * c;
        if (d < 0) {
            x = new double[0];
        } else if (d == 0) {
            x = new double[1];
            x[0] = -b / (2 * a);
        } else {
            x = new double[2];
            x[0] = (-b - sqrt(d)) / (2 * a);
            x[1] = (-b + sqrt(d)) / (2 * a);
        }
        return x;
    }

    public static void main(String[] args) {
        out.print("Введите коэффициенты квадратного уравнения: ");
        double a = in.nextDouble();
        double b = in.nextDouble();
        double c = in.nextDouble();
        double[] x = quadratic(a, b, c);
        out.println("Количество корней: " + x.length);
        for (int i = 0; i < x.length; i++) {
            out.println("x" + (i + 1) + " = " + x[i]);
        }
    }

}

import static java.lang.System.out;
import java.util.Scanner;

/**
 * Определить функцию для расчета количества вхождений заданной буквы в заданном
 * предложении.
 */
public class Task09_CountChar {
    static Scanner in = new Scanner(System.in);

    static int countChar(String s, char c) {
        char[] array = s.toCharArray();
        int count = 0;
        for(int i =0; i<array.length;i++){
            if(array[i] == c) count++;
        }
        return count; //fixme
    }

    public static void main(String[] args) {
        out.println("о встречается в строке обороноспособность"
                + countChar("обороноспособность", 'р') + " раз");
    }

}

import static java.lang.Math.*;
import static java.lang.System.out;
import java.util.Scanner;

/**
 * Дан массив натуральных чисел. Найти их наибольший общий делитель, используя
 * алгоритм Евклида и учитывая, что НОД(a, b, c) = НОД(НОД(a, b), c). Для этого
 * определить функцию для расчета наибольшего общего делителя двух натуральных
 * чисел, используя алгоритм Евклида.
 */
public class Task10_Euclid {

    static Scanner in = new Scanner(System.in);

    static int nod(int a, int b) {
        
        while (a != b) {
            if (a > b) {
               a = a - b;
            } else {
                b = b - a;
            }

        }
        return a;
    }

    public static void main(String[] args) {
        int[] a = {6, 24, 12, 27, 18};
       
        out.println(nod(nod(nod(nod(a[0], a[1]), a[2]), a[3]), a[4]));
    }

}

import static java.lang.System.out;
import java.util.Scanner;

public class Task11_Recursion {
    static Scanner in = new Scanner(System.in);

    // Факториал n! = n.(n-1)!, 0! = 1
    static int fact(int n) {
        int result = 1;
        if (n > 0) {
            result = n * fact(n - 1);
            // Прямая рекурсия
        }
        return result;
    }

    public static void main(String[] args) {
        out.print("Введите число: ");
        int a = in.nextInt();
        out.println("Факториал числа равен " + fact(a));
    }

}
import static java.lang.System.out;
import java.time.Duration;
import java.time.Instant;

public class Task12_Fib {

    static int fibRec(int n) {
        if (n <= 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else {
            return fibRec(n - 1) + fibRec(n - 2);
        }
    }
    
    static int fibIter(int n) {
        if (n <= 0) return 0;
        int f0 = 0, f1 = 1;
        for (int i = 2; i <= n; i++) {
            int f2 = f0 + f1;
            f0 = f1;
            f1 = f2;
        }
        return f1;
    }
    
    public static void main(String[] args) {
        int n = 44;

        Instant start1 = Instant.now();
        out.println(fibIter(n));
        Instant finish1 = Instant.now();
        out.println("Итерационный алгоритм: "
                + Duration.between(start1, finish1).toMillis() / 1000.0);

        Instant start2 = Instant.now();
        out.println(fibRec(n));
        Instant finish2 = Instant.now();
        out.println("Рекурсивный алгоритм: "
                + Duration.between(start2, finish2).toMillis() / 1000.0);
    }

}
public class Task13_Hanoi {

    static void hanoi(int n, int from, int to, int temp) {
        if (n > 0) {
            hanoi(n - 1, from, temp, to);
            System.out.println(from + " -> " + to);
            hanoi(n - 1, temp, to, from);
        }
    }

    public static void main(String[] args) {
        hanoi(8, 1, 2, 3);
    }

}
import static java.lang.System.out;
/*
 * Написать функцию, выводящую все возможные перестановки элементов заданного
 * массива.
 */
public class Task14_Permutations {

    public static void main(String[] args) {
        int[] a = {1, 2, 3, 4};
        genPerm(a, 0);
    }

    static void genPerm(int[] a, int from) {
        if (from == a.length) {
            showPerm(a);
        } else {
            for (int i = from; i < a.length; i++) {
                swap(a, from, i);
                genPerm(a, from + 1);
                swap(a, from, i);
            }
        }
    }

    static void swap(int[] a, int i, int j) {
        int buf = a[i];
        a[i] = a[j];
        a[j] = buf;
    }

    static void showPerm(int[] a) {
        for (int x : a) out.print(x + " ");
        out.println();
    }
}
import static java.lang.System.out;

public class Task15_Queens {

    public static void main(String[] args) {
        int[] q = queens(8);
        showBoard(q);
    }

    static int[] queens(int n) {
        int[] result = new int[n];
        qSolve(result, 0);
        return result;
    }

    static void showBoard(int[] q) {
        for (int i = 0; i < q.length; i++) {
            for (int j = 0; j < q.length; j++) {
                out.print(q[i] == j ? "W|" : "_|");
            }
            out.println();
        }
    }

    static boolean qSolve(int[] q, int from) {
        boolean result = from == q.length;
        if (!result) {
            for (int row = 0; row < q.length; row++) {
                boolean ok = true; //можно ли поставить ферзя
                for (int col = 0; col < from; col++) {
                    int d = from - col;
                    ok = row != q[col] && row != q[col] - d && row != q[col] + d;
                    if (!ok) {
                        break; //нельзя
                    }
                }
                if (ok) {
                    q[from] = row; //ставим ферзя
                    result = qSolve(q, from + 1);
                    if (result) {
                        break; //удачно
                    }
                }
            }
        }
        return result;
    }

}
import static java.lang.Math.*;
import static java.lang.System.out;
import java.util.Scanner;

/**
 * Написать рекурсивную функцию для расчета степени n вещественного числа a
 * (n – натуральное число).
 */
public class Task16_Power {
    static Scanner in = new Scanner(System.in);

    static int power(int a, int n) {
        
        if (n > 0) {
            a = a*power(a, n--);
            // Прямая рекурсия
        }
        return a;
    }
    public static void main(String[] args) {
        
            int a = in.nextInt();
            int n = in.nextInt();
            power(a, n);
            
    }

    
}







